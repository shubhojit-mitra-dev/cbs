import { NextRequest, NextResponse } from 'next/server';
import { verifyHashnodeWebhook } from '~/lib/webhooks/hashnode';
import { db } from '~/server/db';

export async function POST(
  req: NextRequest,
  { params }: { params: Promise<{ userId: string; platformId: string }> }
) {
  const platformId = (await params).platformId
  const userId = (await params).userId

  try {
    // Get the webhook signature from headers
    const signature = req.headers.get('x-hashnode-signature');
    if (!signature) {
      return NextResponse.json(
        { error: 'Missing signature' },
        { status: 401 }
      );
    }

    // Get the platform details from the database
    const platform = await db.query.blogs.findFirst({
        where: (blog, {eq}) => eq(blog.id, platformId),
    });

    if (!platform || platform.userId !== userId) {
      return NextResponse.json(
        { error: 'Platform not found' },
        { status: 404 }
      );
    }

    // Get the raw request body for signature verification
    const payload = await req.text();

    // Verify the webhook signature
    const isValid = verifyHashnodeWebhook(
      payload,
      signature,
      platform.webhookSecret
    );

    if (!isValid) {
      return NextResponse.json(
        { error: 'Invalid signature' },
        { status: 401 }
      );
    }

    // Parse the payload
    const data = JSON.parse(payload);

    // Process the new content
    // await db.insert(contentQueue).values({
    //   id: crypto.randomUUID(),
    //   contentPlatformId: platform.id,
    //   originalContent: data.post.url,
    //   originalContentType: 'blog_post',
    //   generatedContent: '', // Will be generated by your AI service
    //   status: 'pending',
    //   scheduledFor: new Date(), // Or implement your scheduling logic
    //   metadata: {
    //     title: data.post.title,
    //     brief: data.post.brief,
    //     coverImage: data.post.coverImage,
    //     // Add any other relevant metadata
    //   }
    // });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}